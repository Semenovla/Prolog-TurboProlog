upload() :- consult("C:/VIP52/data.txt").	% upload from our DB file into prolog database
add_parent(X, Y) :- not(parent(X, Y)), asserta(parent(X, Y)).	% if parent(X, Y) does not exist, add to DB
add_pol(X, Y) :- not(pol(X, Y)), asserta(pol(X, Y)).		% if pol(X, Y) does not exist, add to DB
save_file():- save("C:/VIP52/data.txt").	% save our DB to file

delete_people(X) :- retractall(parent(X, _)), retractall(parent(_, X)), retractall(pol(X, _)).	% delete all records related to person X from DB
delete_parent(X, Y) :- retractall(parent(X, Y)).						% delete parent(X, Y) from DB
delete_pol(X) :- retractall(pol(X,_)).								% delete pol(X) from DB

/* Change name X to Y in all records in our DB */
change(X, Y):- parent(X, Z), pol(X, W), delete_parent(X, Z), add_parent(Y, Z), add_pol(Y, W), change(X, Y).
change(X, Y):- parent(Z, X), delete_parent(Z, X), add_parent(Z, Y), change(X, Y).
change(X, _):- not(parent(X, _)), not(parent(_, X)), delete_pol(X), !.

run :- write("Enter the desired command!\npol - add pol(X,Y) X-gender, Y-name\nparent - add parent(X,Y) X-child, Y-parent\ndel_pol - delete pol(X)\ndel_par - delete parent(X,Y)\n"),
write("del_pep - delete all records with a person X\nrename - rename X to Y\nupload - upload DB from file\nsave - save DB to file\n"),
main.

main :- write("*************************\n"), readln(Com), menu(Com).

menu("pol") :- readln(X), readln(Y), add_pol(X, Y), main.
menu("parent") :- readln(X), readln(Y), add_parent(X, Y), main.
menu("del_pep") :- readln(X), delete_people(X), main.
menu("del_pol") :- readln(X), delete_pol(X), main.
menu("del_par") :- readln(X), readln(Y), delete_parent(X, Y), main.
menu("rename") :- readln(X), readln(Y), change(X, Y), main.
menu("upload") :- upload(), main.
menu("save") :- save_file(), main.
menu(_) :- write("Invalid input!\n"), !.


man(X) :- pol(X, m).
woman(X) :- pol(X, f).
father(X) :- parent(_, X), pol(X, m).
mother(X) :- parent(_, X), pol(X, f).
son(X) :- parent(X, _), pol(X, m).
daughter(X) :- parent(X, _), pol(X, f).
brother(X, Y) :- parent(X, Z), parent(Y, Z), man(X), X<>Y.
sister(X, Y) :- parent(X, Z), parent(Y, Z), woman(X), X<>Y.
grandfather(X, Y) :- man(X), parent(Y, Z), parent(Z, X), X<>Y.
grandmother(X, Y) :- woman(X), parent(Y, Z), parent(Z, X), X<>Y.
grand(X, Y) :- parent(Y, Z), parent(Z, X), X<>Y.
uncle(X, Y) :- parent(Y, Z), brother(X, Z).
aunt(X, Y) :- parent(Y, Z), sister(X, Z).
nephew(X, Y) :- man(X), parent(X, Z), parent(Z, W), parent(Y, W), Z<>Y.
niece(X, Y) :- woman(X), parent(X, Z), parent(Z, W), parent(Y, W), Z<>Y.
offspring(Y, X) :- parent(Y, X).
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z), parent(Z, Y).
generation(X, Y) :- extreme(X, Y), X<>Y .
generation(X, Y) :- extreme_(X, Y), X<>Y.
extreme(X, Y) :- parent(X, Z), parent(Y, Z); parent(X, W), parent(Y, A), extreme(W, A).
extreme_(X, Y) :- parent(Z, X), parent(Z, Y).
extreme_(X, Y) :- parent(W, X), parent(A, Y), extreme_(W, A).
child(X) :- parent(X, _), not(parent(_, X)).
adult(X) :- parent(_, X).

goal 
run. 